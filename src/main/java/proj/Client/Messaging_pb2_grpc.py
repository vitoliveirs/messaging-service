# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import Messaging_pb2 as Messaging__pb2

GRPC_GENERATED_VERSION = '1.65.4'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in Messaging_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class MessagingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NewChannel = channel.unary_unary(
                '/messaging.MessagingService/NewChannel',
                request_serializer=Messaging__pb2.ChannelName.SerializeToString,
                response_deserializer=Messaging__pb2.Message.FromString,
                _registered_method=True)
        self.DeleteChannel = channel.unary_unary(
                '/messaging.MessagingService/DeleteChannel',
                request_serializer=Messaging__pb2.QueueName.SerializeToString,
                response_deserializer=Messaging__pb2.Message.FromString,
                _registered_method=True)
        self.ListChannels = channel.unary_unary(
                '/messaging.MessagingService/ListChannels',
                request_serializer=Messaging__pb2.Empty.SerializeToString,
                response_deserializer=Messaging__pb2.ChannelList.FromString,
                _registered_method=True)
        self.SendOneMessage = channel.unary_unary(
                '/messaging.MessagingService/SendOneMessage',
                request_serializer=Messaging__pb2.MessageRequest.SerializeToString,
                response_deserializer=Messaging__pb2.MessageResponse.FromString,
                _registered_method=True)
        self.SendMultipleMessages = channel.unary_unary(
                '/messaging.MessagingService/SendMultipleMessages',
                request_serializer=Messaging__pb2.MessageList.SerializeToString,
                response_deserializer=Messaging__pb2.MessageResponse.FromString,
                _registered_method=True)
        self.ReceiveMessages = channel.unary_stream(
                '/messaging.MessagingService/ReceiveMessages',
                request_serializer=Messaging__pb2.QueueName.SerializeToString,
                response_deserializer=Messaging__pb2.Message.FromString,
                _registered_method=True)
        self.ReceiveSingleMessage = channel.unary_unary(
                '/messaging.MessagingService/ReceiveSingleMessage',
                request_serializer=Messaging__pb2.QueueName.SerializeToString,
                response_deserializer=Messaging__pb2.Message.FromString,
                _registered_method=True)
        self.StreamMessages = channel.unary_stream(
                '/messaging.MessagingService/StreamMessages',
                request_serializer=Messaging__pb2.QueueName.SerializeToString,
                response_deserializer=Messaging__pb2.Message.FromString,
                _registered_method=True)


class MessagingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def NewChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendOneMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMultipleMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveSingleMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessagingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NewChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.NewChannel,
                    request_deserializer=Messaging__pb2.ChannelName.FromString,
                    response_serializer=Messaging__pb2.Message.SerializeToString,
            ),
            'DeleteChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteChannel,
                    request_deserializer=Messaging__pb2.QueueName.FromString,
                    response_serializer=Messaging__pb2.Message.SerializeToString,
            ),
            'ListChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListChannels,
                    request_deserializer=Messaging__pb2.Empty.FromString,
                    response_serializer=Messaging__pb2.ChannelList.SerializeToString,
            ),
            'SendOneMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendOneMessage,
                    request_deserializer=Messaging__pb2.MessageRequest.FromString,
                    response_serializer=Messaging__pb2.MessageResponse.SerializeToString,
            ),
            'SendMultipleMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMultipleMessages,
                    request_deserializer=Messaging__pb2.MessageList.FromString,
                    response_serializer=Messaging__pb2.MessageResponse.SerializeToString,
            ),
            'ReceiveMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.ReceiveMessages,
                    request_deserializer=Messaging__pb2.QueueName.FromString,
                    response_serializer=Messaging__pb2.Message.SerializeToString,
            ),
            'ReceiveSingleMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveSingleMessage,
                    request_deserializer=Messaging__pb2.QueueName.FromString,
                    response_serializer=Messaging__pb2.Message.SerializeToString,
            ),
            'StreamMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamMessages,
                    request_deserializer=Messaging__pb2.QueueName.FromString,
                    response_serializer=Messaging__pb2.Message.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'messaging.MessagingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('messaging.MessagingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MessagingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def NewChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/NewChannel',
            Messaging__pb2.ChannelName.SerializeToString,
            Messaging__pb2.Message.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/DeleteChannel',
            Messaging__pb2.QueueName.SerializeToString,
            Messaging__pb2.Message.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/ListChannels',
            Messaging__pb2.Empty.SerializeToString,
            Messaging__pb2.ChannelList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendOneMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/SendOneMessage',
            Messaging__pb2.MessageRequest.SerializeToString,
            Messaging__pb2.MessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMultipleMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/SendMultipleMessages',
            Messaging__pb2.MessageList.SerializeToString,
            Messaging__pb2.MessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReceiveMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/messaging.MessagingService/ReceiveMessages',
            Messaging__pb2.QueueName.SerializeToString,
            Messaging__pb2.Message.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReceiveSingleMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/ReceiveSingleMessage',
            Messaging__pb2.QueueName.SerializeToString,
            Messaging__pb2.Message.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/messaging.MessagingService/StreamMessages',
            Messaging__pb2.QueueName.SerializeToString,
            Messaging__pb2.Message.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
